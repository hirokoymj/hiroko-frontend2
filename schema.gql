# directive @cacheControl(
#   maxAge: Int
#   scope: CacheControlScope
# ) on FIELD_DEFINITION | OBJECT | INTERFACE
# directive @specifiedBy(url: String!) on SCALAR
# enum CacheControlScope {
#   PUBLIC
#   PRIVATE
# }

type Category {
  id: ID!
  name: String!
  abbr: String!
  order: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategoryFeed {
  categoryFeed: [Category!]
  totalCount: Int!
  pageInfo: PageInfo!
}

type City {
  id: Int
  name: String
  country: String
  coord: Coord
}

type CityInfo {
  name: String
  country: String
  lon: String
  lat: String
}

type Coord {
  lon: Float
  lat: Float
}

input createCategoryInput {
  name: String!
  abbr: String!
  order: Int
}

input createSubCategoryInput {
  name: String!
  category: ID!
  order: Int
  categoryOrder: Int
}

input createTopicInput {
  title: String!
  url: String!
  category: ID!
  subCategory: ID!
}

type CurrentWeather {
  id: Int!
  cityInfo: CityInfo
  weather: Weather
}

type DailyForecast {
  id: Int!
  cityInfo: CityInfo
  forecastList: [Forecast]
}

scalar DateTime

type Forecast {
  dt: Int!
  condition: String
  icon: String
  temperature: Temperature
  humidity: Float
  wind: Float
  rain: Float
  sunrise: Int
  sunset: Int
}

type Mutation {
  _: String
  createCategory(input: createCategoryInput): Category
  updateCategory(id: ID!, input: updateCategoryInput!): Category
  deleteCategory(id: ID!): Category
  createSubCategory(input: createSubCategoryInput): SubCategory
  updateSubCategory(id: ID!, input: updateSubCategoryInput!): SubCategory
  deleteSubCategory(id: ID!): SubCategory
  createTopic(input: createTopicInput): Topic
  deleteTopic(id: ID!): Topic
  updateTopic(id: ID!, input: updateTopicInput!): Topic
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Query {
  _: String
  categories(limit: Int, cursor: String, filter: [String]): CategoryFeed!
  categoryById(id: ID!): Category!
  categoryAll: [Category!]
  subCategories(limit: Int, cursor: String, filter: [String]): SubCategoryFeed!
  subCategoryById(id: ID!): SubCategory
  subCategoryByCategory(categoryId: ID): [SubCategory!]
  topics(limit: Int, cursor: String, filter: [String]): TopicFeed!
  topicById(id: ID!): Topic!
  topicByCategory(categoryId: ID!): [Topic!]
  topicByCategoryAbbr(abbr: String!): [Topic!]
  currentWeatherByCity(city: String!, unit: Units): CurrentWeather
  dailyForecast(city: String!, unit: Units): DailyForecast
  cities(city: String!): [City]
}

type SubCategory {
  id: ID!
  name: String!
  order: Int
  category: Category
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubCategoryFeed {
  subCategoryFeed: [SubCategory!]
  totalCount: Int!
  pageInfo: PageInfo!
}

type Temperature {
  day: Float
  min: Float
  max: Float
}

type Topic {
  id: ID!
  title: String!
  url: String!
  category: Category
  subCategory: SubCategory
  createdAt: DateTime
  updatedAt: DateTime
}

type TopicFeed {
  topicFeed: [Topic!]
  totalCount: Int!
  pageInfo: PageInfo!
}

enum Units {
  metric
  imperial
}

input updateCategoryInput {
  name: String
  abbr: String
  order: Int
}

input updateSubCategoryInput {
  name: String
  order: Int
  category: ID
}

input updateTopicInput {
  title: String
  url: String
  category: ID!
  subCategory: ID!
}

scalar Upload

type Weather {
  dt: Int!
  condition: String
  description: String
  feelsLike: String
  icon: String
  temperature: Temperature
  humidity: Float
}
